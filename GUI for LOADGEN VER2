package Unified_Load_Generator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.Socket;
import java.sql.*;

public class NetworkGUI {
    public static final String DB_URL = "jdbc:mysql://localhost:3306/test";
    public static final String DB_USER = "root";
    public static final String DB_PASSWORD = "ayush@5998";
    public static  String SERVER_IP ;
    public static final int SERVER_PORT = 26401;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new NetworkGUI().runGUI(); // Create an instance and start GUI
        });
    }


    public void runGUI() {
        SwingUtilities.invokeLater(() -> {
            new NetworkGUIFrame(); // Start with the User Input frame
        });
    }

    public class NetworkGUIFrame extends JFrame {
        private JTextField sourceIpField, destIpField, destPortField, maxCallField, paraCallField;
        private JComboBox<String> callTypeComboBox;
        private JButton submitButton, cancelButton, statsButton, filtersButton, terminateButton, historyButton;

        private boolean isTerminateOn = false;

        public NetworkGUIFrame() {
            setTitle("Unified Load Generator");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setLayout(new BorderLayout(10, 10));

            // Create input panel with GridBagLayout for precise control
            JPanel inputPanel = new JPanel(new GridBagLayout());
            inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.insets = new Insets(5, 5, 5, 5); // Padding around components
            gbc.fill = GridBagConstraints.HORIZONTAL;

            // Define the image path
            String imagePath = "src/Unified_Load_Generator/Binfo16.png";
            int imageWidth = 20; // Width for resized image
            int imageHeight = 20; // Height for resized image

            // Initialize text fields with increased height
            sourceIpField = createTextField();
            destIpField = createTextField();
            destPortField = createTextField();
            maxCallField = createTextField();
            paraCallField = createTextField();

            callTypeComboBox = new JComboBox<>(new String[]{"Select Call Type", "VoLTE", "Audio", "Audio+IRI", "Packet Data"});
            callTypeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedCallType = (String) callTypeComboBox.getSelectedItem();

                if (destPortField.getText().trim().isEmpty()) {
                    switch (selectedCallType) {
                        case "VoLTE":
                            destPortField.setText("26500");
                            break;
                        case "Audio":
                            destPortField.setText("8043");
                            break;
                        case "Audio+IRI":
                            destPortField.setText("8043");
                            break;
                        case "Packet Data":
                            destPortField.setText("26000");
                            break;
                        default:
                            destPortField.setText(""); // Default case if needed
                            break;
                    }
                }
            }
        });

            // Adding rows with GridBagConstraints
           addInputRow(inputPanel, gbc, "LOAD Generator  IP:", sourceIpField, imagePath, "Test This is Source IP", imageWidth, imageHeight);
addInputRow(inputPanel, gbc, "Call Type:", callTypeComboBox, imagePath,
    "<html>Here You can Select type of call<br>" +
    "VoLTE represents VPHP calls<br>" +
    "Audio represents SipP calls and Audio+IRI represents SipP+IRI<br>" +
    "Packet Data is APDH</html>", imageWidth, imageHeight);
addInputRow(inputPanel, gbc, "ISF IP:", destIpField, imagePath, "Test This is Destination IP", imageWidth, imageHeight);
addInputRow(inputPanel, gbc, "ISF Port:", destPortField, imagePath, "Test This is Destination Port", imageWidth, imageHeight);
addInputRow(inputPanel, gbc, "Max Call:", maxCallField, imagePath, "Test This is Max Call", imageWidth, imageHeight);
addInputRow(inputPanel, gbc, "Parallel Call:", paraCallField, imagePath, "Test This is Parallel Call", imageWidth, imageHeight);

            // Add inputPanel to the frame
            add(inputPanel, BorderLayout.CENTER);

            // Initialize and add buttons
            JPanel buttonPanel = new JPanel();
            submitButton = new JButton("Submit");
            cancelButton = new JButton("Cancel");
            statsButton = new JButton("Stats");
            filtersButton = new JButton("Filters");
            terminateButton = new JButton("Terminate");
            historyButton = new JButton("History");

            buttonPanel.add(submitButton);
            buttonPanel.add(cancelButton);
            buttonPanel.add(statsButton);
            buttonPanel.add(filtersButton);
            buttonPanel.add(terminateButton);
            buttonPanel.add(historyButton);

            add(buttonPanel, BorderLayout.SOUTH);

            pack();
            setLocationRelativeTo(null);
            setVisible(true);
            ImageIcon img = new ImageIcon("src/Unified_Load_Generator/cdot.png");
            setIconImage(img.getImage());

            submitButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    submitButton.setEnabled(false);

                    String sourceIp = sourceIpField.getText();
                    String destIp = destIpField.getText();
                    String destPort = destPortField.getText();
                    String callType = (String) callTypeComboBox.getSelectedItem();
                    int numericValue = getNumericValue(callType); // Get numeric value based on call type
                    int maxCall = Integer.parseInt(maxCallField.getText());
                    int paraCall = Integer.parseInt(paraCallField.getText());

                    if (validateInputs(sourceIp, destIp, destPort, maxCall, paraCall)) {
                        SERVER_IP = sourceIp; // Update SERVER_IP to the value from the text field
                        saveToDatabase(sourceIp, destIp, destPort, callType, maxCall, paraCall);
                        sendDataToServer(sourceIp, destIp, destPort, numericValue, maxCall, paraCall);

                        System.out.println("User Input:");
                        System.out.println("Source IP: " + sourceIp);
                        System.out.println("Server IP: "+SERVER_IP);
                        System.out.println("Destination IP: " + destIp);
                        System.out.println("Destination Port: " + destPort);
                        System.out.println("Call Type: " + callType);
                        System.out.println("Max Call: " + maxCall);
                        System.out.println("Parallel Call: " + paraCall);
                    } else {
                        JOptionPane.showMessageDialog(NetworkGUIFrame.this,
                                "Please enter valid data.",
                                "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    }

                    submitButton.setEnabled(true);
                }
            });

            cancelButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);
                }
            });

            statsButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    StatsFrame statsFrame = new StatsFrame();
                    statsFrame.setVisible(true);
                }
            });

            filtersButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    FiltersFrame filtersFrame = new FiltersFrame();
                    filtersFrame.setVisible(true);
                }
            });

            terminateButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    isTerminateOn = !isTerminateOn;
                    if (isTerminateOn) {
                        sendTerminateCommandToServer(1);
                    } else {
                        sendTerminateCommandToServer(1);
                    }
                }
            });

            historyButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    HistoryFrame historyFrame = new HistoryFrame(NetworkGUIFrame.this);
                    historyFrame.setVisible(true);
                }
            });
        }

        private JTextField createTextField() {
            JTextField textField = new JTextField();
            textField.setPreferredSize(new Dimension(200, 30)); // Adjust the height as needed
            return textField;
        }

        public void addInputRow(JPanel panel, GridBagConstraints gbc, String labelText, JComponent inputField, String imagePath, String tooltipText, int width, int height) {
            gbc.gridx = 0;
            gbc.gridy = GridBagConstraints.RELATIVE;
            gbc.weightx = 0.5;
            panel.add(new JLabel(labelText), gbc);

            gbc.gridx = 1;
            gbc.weightx = 1.0;
            panel.add(inputField, gbc);

            gbc.gridx = 2;
            gbc.weightx = 0;
            JLabel imageLabel = createImageLabel(imagePath, tooltipText, width, height);
            panel.add(imageLabel, gbc);

            // Reset weightx for next row
            gbc.weightx = 0.5;
        }

        private JLabel createImageLabel(String imagePath, String tooltipText, int width, int height) {
            ImageIcon icon = new ImageIcon(imagePath);
            Image image = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
            ImageIcon resizedIcon = new ImageIcon(image);
            JLabel label = new JLabel(resizedIcon);
            label.setToolTipText(tooltipText);
            return label;
        }


        private int getNumericValue(String callType) {
            switch (callType) {
                case "VoLTE":
                    return 1;
                case "Audio":
                    return 2;
                case "Audio+IRI":
                    return 3;
                case "Packet Data":
                    return 4;
                default:
                    return 0; // Default case, handle if needed
            }
        }

        private boolean validateInputs(String sourceIp, String destIp, String destPort, int maxCall, int paraCall) {
            if (sourceIp.isEmpty()|| destIp.isEmpty() || destPort.isEmpty() || maxCall <= 0) {
                return false;
            }

            if (!isValidIPv4(sourceIp) || !isValidIPv4(destIp)) {
                return false;
            }

            try {
                int dstPort = Integer.parseInt(destPort);

           } catch (NumberFormatException e) {
                return false;
            }
             if (paraCall <= 0 || paraCall > maxCall) {
        return false;
    }

            return true;
        }

        private boolean isValidIPv4(String ip) {
            String[] parts = ip.split("\\.");

            if (parts.length != 4) {
                return false;
            }

            for (String part : parts) {
                try {
                    int value = Integer.parseInt(part);
                    if (value < 0 || value > 255) {
                        return false;
                    }
                } catch (NumberFormatException e) {
                    return false;
                }
            }

            return true;
        }

         private void saveToDatabase(String sourceIp, String destIp, String destPort, String callType, int maxCall, int paraCall) {
            try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                String query = "INSERT INTO UserInput (source_ip, dest_ip, dest_port, call_type, max_call, para_call) VALUES (?, ?, ?, ?,  ?, ?)";
                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, sourceIp);

                    preparedStatement.setString(2, destIp);
                    preparedStatement.setString(3, destPort);
                    preparedStatement.setString(4, callType);
                    preparedStatement.setInt(5, maxCall);
                    preparedStatement.setInt(6, paraCall);
                    preparedStatement.executeUpdate();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        private void sendDataToServer(String sourceIp, String destIp, String destPort, int numericValue, int maxCall, int paracall) {
            try (Socket socket = new Socket(SERVER_IP, SERVER_PORT)) {
                OutputStream output = socket.getOutputStream();
                String data = numericValue + "," + sourceIp +  ";" + destIp + ":" + destPort + ";" + maxCall + ";" + paracall;
                output.write(data.getBytes());
                output.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void sendTerminateCommandToServer(int command) {
            try (Socket socket = new Socket(SERVER_IP, SERVER_PORT)) {
                OutputStream output = socket.getOutputStream();
                String data =  "terminate," + command;
                output.write(data.getBytes());
                output.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        public void pasteEntry(String sourceIp, String destIp, String destPort, String callType, int maxCall,int paracall) {
            sourceIpField.setText(sourceIp);

            destIpField.setText(destIp);
            destPortField.setText(destPort);
            callTypeComboBox.setSelectedItem(callType);
            maxCallField.setText(String.valueOf(maxCall));
            paraCallField.setText(String.valueOf(paracall));


        }
        public class StatsFrame extends JFrame {
            private JTable statsTable;

            private static final String DB_URL = "jdbc:mysql://localhost:3306/test";
            private static final String DB_USER = "root";
            private static final String DB_PASSWORD = "ayush@5998";

            public StatsFrame() {
                setTitle("Statistics");
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                setSize(400, 300);
                setLocationRelativeTo(null);
                ImageIcon img = new ImageIcon("src/Unified_Load_Generator/cdot.png");
                setIconImage(img.getImage());

                // Create a table model with column names
                DefaultTableModel model = new DefaultTableModel();
                model.setColumnIdentifiers(new String[]{"Call Type", "Max Call", "Call Count", "Para Call"});

                statsTable = new JTable(model);
                JScrollPane scrollPane = new JScrollPane(statsTable);
                JButton okButton = new JButton("OK");
                okButton.addActionListener(e -> dispose());

                JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
                buttonPanel.add(okButton);

                JPanel mainPanel = new JPanel(new BorderLayout());
                mainPanel.add(scrollPane, BorderLayout.CENTER);
                mainPanel.add(buttonPanel, BorderLayout.SOUTH);

                add(mainPanel);

                fetchStatsData(model); // Populate the table with data from database
            }

            private void fetchStatsData(DefaultTableModel model) {
            String sql = "SELECT call_type, MAX(max_call) AS max_call, COUNT(call_type) AS call_count, MAX(para_call) AS para_call FROM UserInput GROUP BY call_type, para_call";

                try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                     Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery(sql)) {

                    while (rs.next()) {
                        String callType = rs.getString("call_type");
                        int maxCall = rs.getInt("max_call");
                        int callCount = rs.getInt("call_count");
                        int paracall=rs.getInt("para_call");

                        // Add row to the table model
                        model.addRow(new Object[]{callType, maxCall, callCount,paracall});
                    }

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this,
                            "Failed to fetch statistics data from database.",
                            "Database Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }

            public void main(String[] args) {
                SwingUtilities.invokeLater(() -> {
                    new StatsFrame().setVisible(true);
                });
            }
        }


        public class FiltersFrame extends JFrame {
            private JTextField srcIpField, destIpField, destPortField, maxCallField, paraCallField;
            private JComboBox<String> callTypeComboBox;
            private DefaultTableModel tableModel;
            private JTable resultsTable;

            private static final String DB_URL = "jdbc:mysql://localhost:3306/test";
            private static final String DB_USER = "root";
            private static final String DB_PASSWORD = "ayush@5998";

            public FiltersFrame() {
                setTitle("Filters");
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                setSize(800, 400);
                setLocationRelativeTo(null);
                setResizable(true);
                // Load image from the resources directory
ImageIcon img = new ImageIcon(getClass().getResource("cdot.png"));
setIconImage(img.getImage());


                JPanel filtersPanel = new JPanel(new GridLayout(8, 2, 10, 10));
                filtersPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

                filtersPanel.add(new JLabel("Source IP:"));
                srcIpField = new JTextField();
                filtersPanel.add(srcIpField);


                filtersPanel.add(new JLabel("Destination IP:"));
                destIpField = new JTextField();
                filtersPanel.add(destIpField);

                filtersPanel.add(new JLabel("Destination Port:"));
                destPortField = new JTextField();
                filtersPanel.add(destPortField);

                filtersPanel.add(new JLabel("Call Type:"));
                String[] callTypes = {"APDH", "SiPP", "SiPP+IRI", "VoLTE"};
                callTypeComboBox = new JComboBox<>(callTypes);
                filtersPanel.add(callTypeComboBox);

                filtersPanel.add(new JLabel("Max Call:"));
                maxCallField = new JTextField();
                filtersPanel.add(maxCallField);

                filtersPanel.add(new JLabel("Parallel Call:"));
                paraCallField = new JTextField();
                filtersPanel.add(paraCallField);

                JButton applyButton = new JButton("Apply");
                applyButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        applyFilters();
                    }
                });
                filtersPanel.add(applyButton);

                add(filtersPanel, BorderLayout.NORTH);

                // Initialize table model and table with column headers
                String[] columnHeaders = {"Source IP", "Destination IP", "Destination Port", "Call Type", "Max Call","Parallel Call"};
                tableModel = new DefaultTableModel(columnHeaders, 0);
                resultsTable = new JTable(tableModel);
                JScrollPane scrollPane = new JScrollPane(resultsTable);
                add(scrollPane, BorderLayout.CENTER);

                pack();
                setVisible(true);
            }

            private void applyFilters() {
                String srcIp = srcIpField.getText();

                String destIpFilter = destIpField.getText();
                String destPortFilter = destPortField.getText();
                String callType = (String) callTypeComboBox.getSelectedItem();
                String maxCall = maxCallField.getText();
                String paraCall = paraCallField.getText();


                StringBuilder query = new StringBuilder("SELECT * FROM UserInput WHERE 1=1");

                if (!srcIp.isEmpty()) {
                    query.append(" AND source_ip = '").append(srcIp).append("'");
                }


                if (!destIpFilter.isEmpty()) {
                    query.append(" AND dest_ip = '").append(destIpFilter).append("'");
                }

                if (!destPortFilter.isEmpty()) {
                    query.append(" AND dest_port = '").append(destPortFilter).append("'");
                }

                if (callType != null && !callType.isEmpty()) {
                    query.append(" AND call_type = '").append(callType).append("'");
                }

                if (!maxCall.isEmpty()) {
                    query.append(" AND max_call = ").append(maxCall);
                }

                if (!paraCall.isEmpty()) {
                    query.append(" AND para_call = ").append(paraCall);
                }

                SwingUtilities.invokeLater(() -> {
                    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                         Statement stmt = conn.createStatement();
                         ResultSet rs = stmt.executeQuery(query.toString())) {

                        System.out.println("Database connected and query executed.");

                        // Clear existing table data
                        tableModel.setRowCount(0);

                        boolean hasResults = false;

                        while (rs.next()) {
                            hasResults = true;
                            String sourceIp = rs.getString("source_ip");

                            String destIp = rs.getString("dest_ip");
                            String destPort = rs.getString("dest_port");
                            String callTypeResult = rs.getString("call_type");
                            int maxCallResult = rs.getInt("max_call");
                            int paraCallResult = rs.getInt("para_call");


                            // Add row to the table model
                            tableModel.addRow(new Object[]{sourceIp,  destIp, destPort, callTypeResult, maxCallResult, paraCallResult});
                        }

                        if (!hasResults) {
                            JOptionPane.showMessageDialog(this, "No results found.");
                        }

                        // Notify the table that the data has changed
                        tableModel.fireTableDataChanged();

                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this,
                                "Failed to apply filters and retrieve data from the database.",
                                "Database Error", JOptionPane.ERROR_MESSAGE);
                    }
                });
            }

            public void main(String[] args) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        new FiltersFrame().setVisible(true);
                    }
                });
            }
        }

        public class HistoryFrame extends JFrame {
        private JTable historyTable;
        private NetworkGUIFrame mainFrame; // Reference to the main frame

        public HistoryFrame(NetworkGUIFrame mainFrame) {
            this.mainFrame = mainFrame;

            setTitle("History");
            setSize(800, 400);
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            setLayout(new BorderLayout(10, 10));

            historyTable = new JTable();
            historyTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            JScrollPane scrollPane = new JScrollPane(historyTable);

            add(scrollPane, BorderLayout.CENTER);
            ImageIcon img = new ImageIcon("src/Unified_Load_Generator/cdot.png");
                setIconImage(img.getImage());

            JButton pasteButton = new JButton("Paste Selected Entry");
            pasteButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int selectedRow = historyTable.getSelectedRow();
                    if (selectedRow != -1) {
                        DefaultTableModel model = (DefaultTableModel) historyTable.getModel();
                        String sourceIp = (String) model.getValueAt(selectedRow, 0);
                        String destIp = (String) model.getValueAt(selectedRow, 1);
                        String destPort = (String) model.getValueAt(selectedRow, 2);
                        String callType = (String) model.getValueAt(selectedRow, 3);
                        int maxCall = (int) model.getValueAt(selectedRow, 4);
                        int paraCall=(int) model.getValueAt(selectedRow,5);
                        mainFrame.pasteEntry(sourceIp, destIp, destPort, callType, maxCall,paraCall);
                        dispose();
                    } else {
                        JOptionPane.showMessageDialog(HistoryFrame.this,
                                "Please select a row to paste.",
                                "No Selection", JOptionPane.WARNING_MESSAGE);
                    }
                }
            });

            add(pasteButton, BorderLayout.SOUTH);

            loadHistoryData();
        }

        private void loadHistoryData() {
            try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                String query = "SELECT source_ip, dest_ip, dest_port, call_type, max_call, para_call FROM UserInput ORDER BY id DESC LIMIT 5";
                try (Statement statement = connection.createStatement();
                     ResultSet resultSet = statement.executeQuery(query)) {
                    DefaultTableModel model = new DefaultTableModel(
                            new Object[]{"Source IP",  "Destination IP", "Destination Port", "Call Type", "Max Call","Para Call"}, 0);
                    while (resultSet.next()) {
                        String sourceIp = resultSet.getString("source_ip");

                        String destIp = resultSet.getString("dest_ip");
                        String destPort = resultSet.getString("dest_port");
                        String callType = resultSet.getString("call_type");
                        int maxCall = resultSet.getInt("max_call");
                        int paraCall = resultSet.getInt("para_call");
                        model.addRow(new Object[]{sourceIp,  destIp, destPort, callType, maxCall,paraCall});
                    }
                    historyTable.setModel(model);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    }
}
